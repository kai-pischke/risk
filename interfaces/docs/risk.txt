-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/kai-pischke/risk#readme</a>
@package risk
@version 0.1.0.0


-- | This module deals with attacking and defending types and gives an
--   interface to calculate battle outcomes.
module Battle
data Defenders
OneDef :: Defenders
TwoDef :: Defenders
data Attackers
OneAtt :: Attackers
TwoAtt :: Attackers
ThreeAtt :: Attackers

-- | Takes a number of attackers (<a>Attackers</a>) and a number of
--   defenders (<a>Defenders</a>) and calculates the attackers lost, the
--   defeners lost and the new StdGen (returned in a tuple in that order).
doBattle :: Attackers -> Defenders -> StdGen -> (Int, Int, StdGen)
instance GHC.Classes.Ord Battle.Attackers
instance GHC.Show.Show Battle.Attackers
instance GHC.Classes.Eq Battle.Attackers
instance GHC.Classes.Ord Battle.Defenders
instance GHC.Show.Show Battle.Defenders
instance GHC.Classes.Eq Battle.Defenders
instance GHC.Enum.Enum Battle.Attackers
instance GHC.Enum.Enum Battle.Defenders


-- | This module holds the types that represent individual game pieces and
--   other game-specific enumerated types.
module GameElements

-- | Each player is represented by the colour they play as.
data Player
Black :: Player
Blue :: Player
Green :: Player
Red :: Player
Yellow :: Player

-- | We ignore the country shown on the card.
data Card
Infantry :: Card
Cavalry :: Card
Artillery :: Card
Wild :: Card

-- | Cards always come in sets of 3 when being traded in.
type CardSet = (Card, Card, Card)

-- | A player csan trade in at most 2 sets at once.
data TradeIn
None :: TradeIn
OneSet :: CardSet -> TradeIn
TwoSet :: CardSet -> CardSet -> TradeIn
instance GHC.Show.Show GameElements.TradeIn
instance GHC.Classes.Eq GameElements.TradeIn
instance GHC.Read.Read GameElements.Card
instance GHC.Classes.Ord GameElements.Card
instance GHC.Show.Show GameElements.Card
instance GHC.Classes.Eq GameElements.Card
instance GHC.Read.Read GameElements.Player
instance GHC.Classes.Ord GameElements.Player
instance GHC.Show.Show GameElements.Player
instance GHC.Classes.Eq GameElements.Player


-- | The basic implementation of undirected graphs that forms the basis for
--   the underlying representation of our Risk board.
module Graph

-- | This type models an undirected (not necessarily connected) graph. We
--   consider the vertecies of the graph to be <b>nodes</b> (which are
--   members of the type <tt>n</tt>). We require that each node is in a
--   distinct equivelence class of the equivalence relation <tt>Eq n</tt>.
--   It is important to note that we consider all graphs (of type
--   <tt><a>Graph</a> n</tt>) to contain every inhabitant of the type
--   <tt>n</tt>. In general, we assume that all nodes are disconnected
--   unless otherwise specified when creating the graph. So for example a
--   <tt><a>Graph</a> Integer</tt> contains an infinite number of nodes. We
--   say that two nodes are neighbours if (and only if) there is an edge
--   between those two vertecies of the graph.
data Graph n

-- | Given a graph and a node (vertex of the graph), returns a list of the
--   directly adjacent nodes. Note that, as a consequence of the fact that
--   we consider all members of a type to be nodes, the function
--   <a>neighbours</a> is a total function, so defined for all possible n
--   (returning the empty list for nodes with no neighbours).
neighbours :: Eq n => Graph n -> n -> [n]

-- | Given a graph and two nodes, returns <tt>True</tt> if there is an edge
--   connecting them and <tt>False</tt> otherwise. <a>isNeighbour</a> is
--   also a total function (see <a>neighbours</a>).
isNeighbour :: Eq n => Graph n -> n -> n -> Bool

-- | Given a valid adjacency list for an undirected graph, returns the
--   corresponding representation as a <tt><a>Graph</a> n</tt>. The
--   adjacency list takes the form of a list of pairs. Each pair contains a
--   member of the type n followed by a (possibly empty) list of
--   neighbours. The (<a>isNeighbour</a>) relation must be symmetric: (so
--   if <tt>a, b :: n</tt> if <tt>a</tt> has <tt>b</tt> in its list, then
--   <tt>b</tt> must have <tt>a</tt> in its list). Any pairs containing the
--   empty list as a second element are ignored - these nodes (as well as
--   any others not included) are treated as having no neighbours. This
--   well-formedness condition, together with the condition that no
--   duplicate entries exist, as precoditions to the function (which should
--   throw an error if they are violated).
makeGraph :: Eq n => [(n, [n])] -> Graph n


-- | This module deals with representing the game board itself and also
--   provides the <a>Country</a> type.
module RiskBoard

-- | The Country type should be inhabited by 42 nullary constructors with
--   the names corresponding to the country names (including
--   capitalisations, missing spaces where necessary).
data Country
Alaska :: Country
Alberta :: Country
CentralAmerica :: Country
EasternUnitedStates :: Country
Greenland :: Country
NorthwestTerritory :: Country
Ontario :: Country
Quebec :: Country
WesternUnitedStates :: Country
Argentina :: Country
Brazil :: Country
Peru :: Country
Venezuela :: Country
GreatBritain :: Country
Iceland :: Country
NorthernEurope :: Country
Scandinavia :: Country
SouthernEurope :: Country
Ukraine :: Country
WesternEurope :: Country
Congo :: Country
EastAfrica :: Country
Egypt :: Country
Madagascar :: Country
NorthAfrica :: Country
SouthAfrica :: Country
Afghanistan :: Country
China :: Country
India :: Country
Irkutsk :: Country
Japan :: Country
Kamchatka :: Country
MiddleEast :: Country
Mongolia :: Country
Siam :: Country
Siberia :: Country
Ural :: Country
Yakutsk :: Country
EasternAustralia :: Country
Indonesia :: Country
NewGuinea :: Country
WesternAustralia :: Country

-- | a <a>Continent</a> is simply a list of the Countries it contains.
type Continent = [Country]

-- | Given a <a>Country</a>, returns the list of all neighbouring countries
--   (in no specific order).
neighbours :: Country -> [Country]

-- | Given two countries, returns <a>True</a> if there is an edge
--   connecting them and <a>False</a> otherwise.
isNeighbour :: Country -> Country -> Bool

-- | A list of the countries in North America.
northAmerica :: Continent

-- | A list of the countries in Europe.
europe :: Continent

-- | A list of the countries in Asia.
asia :: Continent

-- | A list of the countries in South America.
southAmerica :: Continent

-- | A list of the countries in Africa.
africa :: Continent

-- | A list of the countries in Australia.
australia :: Continent
instance GHC.Enum.Bounded RiskBoard.Country
instance GHC.Classes.Ord RiskBoard.Country
instance GHC.Classes.Eq RiskBoard.Country
instance GHC.Enum.Enum RiskBoard.Country
instance GHC.Read.Read RiskBoard.Country
instance GHC.Show.Show RiskBoard.Country

module ParsePart
data Switch a b
LSwitch :: a -> Switch a b
RSwitch :: b -> Switch a b
data Owner
Owner :: Player -> Owner
Unowned :: Owner
instance Data.Aeson.Types.ToJSON.ToJSON ParsePart.Owner
instance (Data.Aeson.Types.ToJSON.ToJSON a, Data.Aeson.Types.ToJSON.ToJSON b) => Data.Aeson.Types.ToJSON.ToJSON (ParsePart.Switch a b)
instance Data.Aeson.Types.ToJSON.ToJSON System.Random.Internal.StdGen
instance Data.Aeson.Types.FromJSON.FromJSON System.Random.Internal.StdGen
instance Data.Aeson.Types.ToJSON.ToJSON GameElements.Player
instance Data.Aeson.Types.FromJSON.FromJSON GameElements.Player
instance Data.Aeson.Types.ToJSON.ToJSON GameElements.Card
instance Data.Aeson.Types.FromJSON.FromJSON GameElements.Card
instance Data.Aeson.Types.ToJSON.ToJSON GameElements.TradeIn
instance Data.Aeson.Types.FromJSON.FromJSON GameElements.TradeIn
instance Data.Aeson.Types.ToJSON.ToJSON RiskBoard.Country
instance Data.Aeson.Types.FromJSON.FromJSON RiskBoard.Country
instance Data.Aeson.Types.FromJSON.FromJSONKey RiskBoard.Country


-- | The is a basic representation of the Game during the initial troop
--   placement rounds.
module SetupBoard

-- | Contains a SetupBoardState and information about how complete the
--   board is.
data SetupState

-- | when not all countries have a owner
Incomplete :: SetupBoardState -> SetupState

-- | when all countries have an owner but not all troops have been placed
PartiallyComplete :: SetupBoardState -> SetupState

-- | when all troops have been placed
Complete :: SetupBoardState -> SetupState

-- | Creates a blank board with no troops and where no countries are owned
--   yet. Creates an <a>Incomplete</a> <a>SetupBoardState</a>.
emptyBoard :: [Player] -> SetupState

-- | Partial function, only defined for incomplete and partially complete
--   SetupState and only when the current player owns the given country. It
--   should error if called on a Complete SetupBoardState. It should return
--   <a>Nothing</a> if called on a <a>Country</a> not owned by current
--   player (or unowned).
placeTroop :: Country -> SetupState -> Maybe SetupState
completeBoardOwner :: SetupState -> Country -> (Player, Int)

-- | Partial function, defined for <a>PartiallyComplete</a>
--   <a>SetupState</a>, gives the owner and number of troops in each
--   country. It should error if called on a incomplete SetupState
partiallyCompleteBoardOwner :: SetupState -> Country -> (Player, Int)

-- | Partial function, only defined for any <a>SetupState</a>, gives the
--   owner and number of troops in each country.
incompleteBoardOwner :: SetupState -> Country -> (Maybe Player, Int)

-- | Gives the turnOrder for a <a>SetupState</a>, with the player's whose
--   turn it currently is at the head of the list.
setUpTurnOrder :: SetupState -> [Player]
instance GHC.Show.Show SetupBoard.SetupState
instance GHC.Classes.Eq SetupBoard.SetupState
instance GHC.Show.Show SetupBoard.SetupBoardState
instance GHC.Classes.Eq SetupBoard.SetupBoardState
instance Data.Aeson.Types.ToJSON.ToJSON SetupBoard.SetupState
instance Data.Aeson.Types.FromJSON.FromJSON SetupBoard.SetupState
instance Data.Aeson.Types.ToJSON.ToJSON SetupBoard.SetupBoardState
instance Data.Aeson.Types.FromJSON.FromJSON SetupBoard.SetupBoardState


-- | The basic representation of a Game excluding all dynamic and
--   non-deterministic elements. This module focuses only on encapsulating
--   all information needed to reconstruct a given game position and
--   doesn't focus on the actual mechanics or logic of gameplay.
module State
data GameState
data MiniPhase
MidBattle :: Country -> Country -> Attackers -> MiniPhase
WonBattle :: Country -> Country -> Attackers -> MiniPhase
TimeToTrade :: MiniPhase
Normal :: MiniPhase
data Phase
Reinforce :: Phase
Attack :: MiniPhase -> Phase
Fortify :: Phase

-- | Creates a blank game with no troops in any country. Players should be
--   given in turn order starting with the current player.
newGame :: [Player] -> (Country -> (Player, Int)) -> StdGen -> GameState

-- | Gives the number of troops in a given country.
troops :: GameState -> Country -> Int

-- | Returns a list of players (in the order of play) starting with the
--   current player.
turnOrder :: GameState -> [Player]

-- | Gives the player who owns a certain country.
owner :: GameState -> Country -> Player

-- | Modifies (adds or subtracts) the given number of troops (to or from a
--   country).
changeTroops :: Country -> Int -> GameState -> GameState

-- | Replaces the owner of a country.
changeOwner :: Country -> Player -> GameState -> GameState

-- | Advances to the next turn (and updates the phase).
nextTurn :: GameState -> GameState

-- | Gets the current StdGen.
currentStdGen :: GameState -> StdGen

-- | Replaces the current StdGen.
updateStdGen :: StdGen -> GameState -> GameState

-- | Gets the current <a>Phase</a>.
phase :: GameState -> Phase

-- | Updates the current <a>Phase</a>.
nextPhase :: GameState -> GameState

-- | Does nothing if not in <a>Attack</a> <a>Phase</a>, otherwise sets
--   phase to <a>Attack</a> <a>MiniPhase</a> (inserting the provided
--   <a>MiniPhase</a>). Note that calling this function on a
--   <a>WonBattle</a> will cause it to remember that the current player
--   gets a card this turn.
changeMiniPhase :: MiniPhase -> GameState -> GameState

-- | Returns the list of cards in the player's hand
cards :: GameState -> Player -> [Card]

-- | Puts the card in the discard pile.
useCard :: Player -> Card -> GameState -> GameState

-- | Adds the top card to the player's hand. Shuffles the discard pile if
--   necessary using a provided shuffle function.
drawCard :: Player -> GameState -> GameState

-- | Removes the <a>Player</a> given in the second argument from the game.
--   Gives all cards to the <a>Player</a> given in the first argument.
kick :: Player -> Player -> GameState -> GameState

-- | <tt>True</tt> if and only if the current player has drawn a card this
--   turn.
hasDrawn :: GameState -> Bool
instance GHC.Show.Show State.GameState
instance GHC.Classes.Eq State.GameState
instance GHC.Show.Show State.Phase
instance GHC.Classes.Eq State.Phase
instance GHC.Show.Show State.MiniPhase
instance GHC.Classes.Eq State.MiniPhase
instance Data.Aeson.Types.ToJSON.ToJSON State.GameState
instance Data.Aeson.Types.FromJSON.FromJSON State.GameState
instance Data.Aeson.Types.ToJSON.ToJSON State.Phase
instance Data.Aeson.Types.FromJSON.FromJSON State.Phase


-- | The basic implementation of the rules for the game, verifying
--   individual actions that manipulate the state.
module Moves

-- | The Country type should be inhabited by 42 nullary constructors with
--   the names corresponding to the country names (including
--   capitalisations, missing spaces where necessary).
data Country
Alaska :: Country
Alberta :: Country
CentralAmerica :: Country
EasternUnitedStates :: Country
Greenland :: Country
NorthwestTerritory :: Country
Ontario :: Country
Quebec :: Country
WesternUnitedStates :: Country
Argentina :: Country
Brazil :: Country
Peru :: Country
Venezuela :: Country
GreatBritain :: Country
Iceland :: Country
NorthernEurope :: Country
Scandinavia :: Country
SouthernEurope :: Country
Ukraine :: Country
WesternEurope :: Country
Congo :: Country
EastAfrica :: Country
Egypt :: Country
Madagascar :: Country
NorthAfrica :: Country
SouthAfrica :: Country
Afghanistan :: Country
China :: Country
India :: Country
Irkutsk :: Country
Japan :: Country
Kamchatka :: Country
MiddleEast :: Country
Mongolia :: Country
Siam :: Country
Siberia :: Country
Ural :: Country
Yakutsk :: Country
EasternAustralia :: Country
Indonesia :: Country
NewGuinea :: Country
WesternAustralia :: Country

-- | Add reinforcements (specified as a list of pairs of <a>Country</a> and
--   non-negative <a>Int</a> number of troops to add). Must be during the
--   correct phase. Should update phase to <a>Attack</a> <a>Normal</a>.
--   Continent and country bonuses should be taken into account.
reinforce :: TradeIn -> [(Country, Int)] -> GameState -> Maybe GameState

-- | Puts the state into the <a>MidBattle</a> <a>MiniPhase</a>, which
--   records the attacking and defending country, and the number of
--   attackers. Must Be neighbouring countries owned by different players.
--   Must be during the correct phase. Attacker must have &lt; number of
--   attackers in the attacking country.
attack :: Country -> Country -> Attackers -> GameState -> Maybe GameState

-- | Only defined for <a>MidBattle</a> <a>MiniPhase</a>. Chooses the number
--   of defenders the defending country uses. The defending country must
--   have &gt;= number of defenders used. Enters <a>WonBattle</a> phase if
--   there are no defenders left, otherwise goes back to <a>Attack</a>
--   <a>Normal</a> <a>MiniPhase</a>.
chooseDefenders :: Defenders -> GameState -> Maybe GameState

-- | Invades a country from another with <a>Int</a> number of troops,
--   meaning owner is changed and <a>Int</a> troops are tranferred from the
--   attacking country to the defending country. Should be only able to be
--   called in <a>WonBattle</a> <a>MiniPhase</a>. Can't invade with less
--   than the number of attackers left. Should move back to a <a>Normal</a>
--   <a>Attack</a> <a>MiniPhase</a>. Gives an error if called with a
--   <a>MiniPhase</a> which shouldn't be possible. Kicks players out if
--   their last country is invaded. Also calculates when winning. It must
--   invade with at least the number of attackers left, must leave at least
--   1 in the previous country.
invade :: Int -> GameState -> Maybe GameState

-- | Must be during the <a>Attack</a> <a>Normal</a> <a>MiniPhase</a>.
--   Should update phase to <a>Fortify</a>.
endAttack :: GameState -> Maybe GameState

-- | Moves troops from one country to another. Countries must be neighbours
--   and owned by the current player. Must be during the correct phase.
--   Troops are sent from the first country to the second one. Should
--   update phase to <a>Reinforce</a> and call nextTurn.
fortify :: Country -> Country -> Int -> GameState -> Maybe GameState

-- | Must be during the correct phase. Should update phase to Reinforce and
--   call nextTurn.
skipFortify :: GameState -> Maybe GameState

-- | Only valid during the <a>Attack</a> <a>TimeToTrade</a>
--   <a>MiniPhase</a>. Takes a <a>TradeIn</a> (owned by the current player)
--   and caches it in for troops.
trade :: TradeIn -> [(Country, Int)] -> GameState -> Maybe GameState


-- | This module defines the messages we make use of in <tt>Interface</tt>.
module Message
data Response
General :: Update -> Response
Special :: Question -> Player -> Response
Invalid :: Error -> Player -> Response
GameWon :: Player -> Response
data Update
WaitingRoom :: [Player] -> Update
Setup :: SetupState -> Update
Play :: GameState -> Update
data Question
NumDefenders :: Question
GetTrade :: Question
data Error
InvalidMove :: Error
NotYourTurn :: Error
NotEnoughPlayers :: Error
NotInWaitingRoom :: Error
SetupComplete :: Error
NotInSetup :: Error
NotInPlay :: Error
NotRequestingDefenders :: Error
data Request
Request :: Player -> RequestType -> Request
data RequestType
StartGame :: RequestType
PlaceTroop :: Country -> RequestType
Attack :: Country -> Country -> Attackers -> RequestType
Reinforce :: TradeIn -> [(Country, Int)] -> RequestType
Fortify :: Country -> Country -> Int -> RequestType
Invade :: Int -> RequestType
ChooseDefenders :: Defenders -> RequestType
EndAttack :: RequestType
SkipFortify :: RequestType
Trade :: TradeIn -> [(Country, Int)] -> RequestType
instance GHC.Show.Show Message.Request
instance GHC.Classes.Eq Message.Request
instance GHC.Show.Show Message.RequestType
instance GHC.Classes.Eq Message.RequestType
instance GHC.Show.Show Message.Response
instance GHC.Classes.Eq Message.Response
instance GHC.Show.Show Message.Error
instance GHC.Classes.Eq Message.Error
instance GHC.Show.Show Message.Question
instance GHC.Classes.Eq Message.Question
instance GHC.Show.Show Message.Update
instance GHC.Classes.Eq Message.Update


-- | This module handles the encoding and decoding of JSON responses and
--   requests.
module Parse

-- | Reads in a received <a>ByteString</a> and returns a <a>Left</a>
--   <a>Request</a> or a <a>Right</a> <a>ParseError</a>.
decodeRequest :: ByteString -> Either Request ParseError

-- | Encodes a <a>Response</a> to a <a>ByteString</a>.
encodeResponse :: Response -> ByteString
type ParseError = ByteString
instance Data.Aeson.Types.FromJSON.FromJSON Message.Request
instance Data.Aeson.Types.ToJSON.ToJSON Message.Response


-- | This module wraps many of the functions in moves in additional
--   validation logic and exposes a Hasskell version of the JSON interface
--   used to communicate with the Server.
module Interface

-- | The main type holding all the needed information about the game.
data Game
data Response
General :: Update -> Response
Special :: Question -> Player -> Response
Invalid :: Error -> Player -> Response
GameWon :: Player -> Response
data Request
Request :: Player -> RequestType -> Request

-- | Creates a new empty game with a given <a>StdGen</a>.
empty :: StdGen -> Game

-- | Errors if we aren't in the waiting phase, or if the waiting room is
--   full, or if the given waiting room is invalid (i.e. there are repeats)
addPlayer :: Game -> (Player, Game)

-- | Total function. For any <a>Request</a>, checks whether it is valid and
--   returns an appropriate <a>Response</a> message along with the new
--   <a>Game</a> with the correct changes made.
receive :: Request -> Game -> (Response, Game)
instance GHC.Classes.Eq Interface.Game
instance GHC.Show.Show Interface.Game
instance Data.Aeson.Types.ToJSON.ToJSON Interface.Game
instance Data.Aeson.Types.FromJSON.FromJSON Interface.Game


-- | This module packages the whole game into a single functin (<a>run</a>)
--   that creates a websockets-based server for the game.
module Server

-- | Runs the game server. Requires an <a>Int</a> which specifies the port.
run :: Int -> IO ()
